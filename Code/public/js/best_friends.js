// Generated by CoffeeScript 1.3.1
(function() {
  var CommunicationLine, CommunicationLineView, StraightKeyInput, drawSignalLine, init, kDashToken, kDotToken, kWordStopToken,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  kDotToken = 0;

  kDashToken = 1;

  kWordStopToken = 2;

  CommunicationLine = (function(_super) {

    __extends(CommunicationLine, _super);

    CommunicationLine.name = 'CommunicationLine';

    function CommunicationLine() {
      this.moveDataOneStep = __bind(this.moveDataOneStep, this);

      this.addToken = __bind(this.addToken, this);
      return CommunicationLine.__super__.constructor.apply(this, arguments);
    }

    CommunicationLine.prototype.initialize = function() {
      this.inputQueue = [];
      this.communicationLine = ['', '', '', '', '', '', '', '', '', ''];
      return setInterval(this.moveDataOneStep, 100);
    };

    CommunicationLine.prototype.addToken = function(token) {
      return this.inputQueue.push(token);
    };

    CommunicationLine.prototype.moveDataOneStep = function() {
      var nextToken;
      this.trigger('tokenReachedReceiver', this.communicationLine.pop());
      nextToken = this.inputQueue.shift();
      this.communicationLine.unshift(void 0 === nextToken ? '' : nextToken);
      return this.trigger('hasNewData', this.communicationLine);
    };

    return CommunicationLine;

  })(Backbone.Model);

  StraightKeyInput = (function(_super) {

    __extends(StraightKeyInput, _super);

    StraightKeyInput.name = 'StraightKeyInput';

    function StraightKeyInput() {
      this.sendUserInput = __bind(this.sendUserInput, this);

      this.wordStopTimerExpired = __bind(this.wordStopTimerExpired, this);

      this.dashTimerExpired = __bind(this.dashTimerExpired, this);

      this.startTimers = __bind(this.startTimers, this);
      return StraightKeyInput.__super__.constructor.apply(this, arguments);
    }

    StraightKeyInput.prototype.initialize = function() {
      this.dashTimer = null;
      this.dashFlag = false;
      this.wordStopTimer = null;
      return this.wordStopFlag = false;
    };

    StraightKeyInput.prototype.events = {
      'mousedown #straight-key': 'startTimers',
      'mouseup #straight-key': 'sendUserInput'
    };

    StraightKeyInput.prototype.startTimers = function() {
      this.dashTimer = setTimeout(this.dashTimerExpired, 250);
      return this.wordStopTimer = setTimeout(this.wordStopTimerExpired, 1000);
    };

    StraightKeyInput.prototype.dashTimerExpired = function() {
      return this.dashFlag = true;
    };

    StraightKeyInput.prototype.wordStopTimerExpired = function() {
      return this.wordStopFlag = true;
    };

    StraightKeyInput.prototype.sendUserInput = function() {
      if (this.wordStopFlag) {
        this.model.addToken(kWordStopToken);
      } else if (this.dashFlag) {
        this.model.addToken(kDashToken);
      } else {
        this.model.addToken(kDotToken);
      }
      clearTimeout(this.dashTimer);
      clearTimeout(this.wordStopTimer);
      this.dashFlag = false;
      return this.wordStopFlag = false;
    };

    return StraightKeyInput;

  })(Backbone.View);

  CommunicationLineView = (function(_super) {

    __extends(CommunicationLineView, _super);

    CommunicationLineView.name = 'CommunicationLineView';

    function CommunicationLineView() {
      this.render = __bind(this.render, this);
      return CommunicationLineView.__super__.constructor.apply(this, arguments);
    }

    CommunicationLineView.prototype.initialize = function() {
      return this.model.bind('hasNewData', this.render);
    };

    CommunicationLineView.prototype.render = function(tokens) {
      var context, token, tokenNum, _i, _len, _results;
      context = document.getElementById("communicationLineCanvas").getContext('2d');
      context.clearRect(0, 0, context.canvas.width, 29);
      tokenNum = 0;
      _results = [];
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        token = tokens[_i];
        _results.push((function(token) {
          if (kDotToken === token) {
            context.beginPath();
            context.moveTo((50 * tokenNum) + 15, 15);
            context.arc((50 * tokenNum) + 15, 15, 10, 0, Math.PI * 2, false);
            context.closePath();
            context.fill();
            context.stroke();
          } else if (kDashToken === token) {
            context.fillRect((50 * tokenNum) + 15, 15, 25, 10);
          } else if (kWordStopToken === token) {
            context.fillRect((50 * tokenNum) + 30, 5, 10, 20);
          }
          return tokenNum += 1;
        })(token));
      }
      return _results;
    };

    return CommunicationLineView;

  })(Backbone.View);

  drawSignalLine = function(context) {
    context.moveTo(0, 30);
    context.lineTo(500, 30);
    context.strokeStyle = "#000";
    context.closePath();
    return context.stroke();
  };

  init = function() {
    var communicationLineView, context, model, straightKey;
    model = new CommunicationLine;
    straightKey = new StraightKeyInput({
      'el': $('#straight-key-div'),
      'model': model
    });
    communicationLineView = new CommunicationLineView({
      'el': $('#communication-line-div'),
      'model': model
    });
    context = document.getElementById("communicationLineCanvas").getContext('2d');
    context.clearRect(0, 0, context.canvas.width, context.canvas.height);
    return drawSignalLine(context);
  };

  $(document).ready(init);

}).call(this);
